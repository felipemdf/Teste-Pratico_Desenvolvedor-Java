/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.felipemdf.client.views;


import com.felipemdf.client.dtos.CarImageDto;
import com.felipemdf.client.dtos.ResponseDto;
import com.felipemdf.client.services.CarImageService;
import com.felipemdf.client.services.CarService;
import com.felipemdf.client.views.components.Dialogs;
import com.felipemdf.client.utils.Utils;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JRootPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import net.coobird.thumbnailator.Thumbnails;

/**
 *
 * @author fmari_v4rpu9g
 */
public class ImageViewer extends javax.swing.JFrame {

    CarImageService imageService;
    JFileChooser fileChooser;
    JLabel imageLabel;
    DefaultTableModel tableModel;

    int indexCar = -1;

    public ImageViewer(CarImageService imageService) {
        initComponents();

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);   
        setLocationRelativeTo(null);
        this.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);

        this.imageService = imageService;

        tableModel = (DefaultTableModel) table.getModel();
        table.setDefaultEditor(Object.class, null);

        imageLabel = new JLabel();
        imageLabel.setBounds(0, 0, 680, 640);
        paneImage.add(imageLabel);

        fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes()));

        updateTable();
    }

    public void updateTable() {
        ArrayList<CarImageDto> images = imageService.getAll();
        updateTable(images);
    }

    public void updateTable(ArrayList<CarImageDto> images) {
        tableModel.setNumRows(0);
        images.forEach(image -> {
            tableModel.addRow(new Object[]{image.getId()});
        });
    }

    public void saveImage(BufferedImage imageBuffer, String format) {
        try {
            BufferedImage imageRezized = Thumbnails.of(imageBuffer)
                    .size(680, 580)
                    .asBufferedImage();

            imageService.save(new CarImageDto(Utils.bufferImageToBase64(imageRezized, format)));
            updateTable();

            showImage(imageRezized);
        } catch (Exception e) {
            System.err.println(e);
        }
    };
    
    public void showImage(BufferedImage image) {
        if (image == null) {
            imageLabel.setIcon(null);
        }
        imageLabel.setIcon(new ImageIcon(image));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneImage = new javax.swing.JPanel();
        paneTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buttonRemove = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 800));
        setMinimumSize(new java.awt.Dimension(800, 500));

        paneImage.setMaximumSize(new java.awt.Dimension(0, 0));
        paneImage.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout paneImageLayout = new javax.swing.GroupLayout(paneImage);
        paneImage.setLayout(paneImageLayout);
        paneImageLayout.setHorizontalGroup(
            paneImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );
        paneImageLayout.setVerticalGroup(
            paneImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        buttonRemove.setText("Remove");
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneTableLayout = new javax.swing.GroupLayout(paneTable);
        paneTable.setLayout(paneTableLayout);
        paneTableLayout.setHorizontalGroup(
            paneTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneTableLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(buttonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(paneTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        paneTableLayout.setVerticalGroup(
            paneTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(paneTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(94, 94, 94))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneImage, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paneImage, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int action = fileChooser.showSaveDialog(null);

        if (action == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            int indexDot = fileChooser.getSelectedFile().getName().lastIndexOf(".");
            String format = fileChooser.getSelectedFile().getName().substring(indexDot + 1);
            try {
                BufferedImage image = ImageIO.read(new File(path));
                saveImage(image, format);

            } catch (IOException ex) {
                Logger.getLogger(ImageViewer.class.getName()).log(Level.SEVERE, null, ex);
                Dialogs.dialogMessage(true, "Image " + path + " not found!");
            }
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed

        Long idImageTable = getTableIdSelected();

        if (idImageTable == null) {
            Dialogs.dialogMessage(true, "Please, select a row in the table!");
            return;
        }

        ResponseDto response = imageService.remove(idImageTable);
        Dialogs.dialogMessage(response);
        
        updateTable();
        showImage(null);
    }//GEN-LAST:event_buttonRemoveActionPerformed

    public Long getTableIdSelected() {
        int row = table.getSelectedRow();

        if (row == -1) {
            return null;
        }

        return (Long) table.getModel().getValueAt(row, 0);
    }
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        Long id = getTableIdSelected();

        if (id == null) {
            showImage(null);
        }

        byte[] image = imageService.getLocalDataById(id);

        try {
            showImage(Utils.byteToBufferImage(image));
        } catch (Exception e) {
            System.err.print(e);
        }
    }//GEN-LAST:event_tableMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel paneImage;
    private javax.swing.JPanel paneTable;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
